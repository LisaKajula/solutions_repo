{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is a classic physics problem where an object moves under gravity alone after an initial launch. We\u2019ll derive the equations from Newton\u2019s laws, assuming constant gravitational acceleration \\(g\\) . Governing Equations Notes : We start with a projectile launched from the origin \\((x_0, y_0) = (0, 0)\\) with initial speed \\(v_0\\) at angle \\(\\theta\\) . The velocity splits into horizontal and vertical components, and gravity only acts downward. Initial velocity components: \\(v_{x0} = v_0 \\cos\\theta\\) (horizontal, constant since no horizontal acceleration) \\(v_{y0} = v_0 \\sin\\theta\\) (vertical, affected by gravity) Acceleration: \\(a_x = 0\\) (no horizontal force) \\(a_y = -g\\) (gravity downward) Using kinematic equations \\(x(t) = x_0 + v_{x0}t + \\frac{1}{2}a_x t^2\\) and \\(y(t) = y_0 + v_{y0}t + \\frac{1}{2}a_y t^2\\) : - Horizontal: \\( \\(x(t) = v_0 \\cos\\theta \\cdot t\\) \\) - Vertical: \\( \\(y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) \\) Notes : These are the parametric equations of motion. The horizontal motion is linear (constant velocity), while the vertical motion is quadratic (parabolic due to gravity). Time of Flight Notes : The time of flight \\(T\\) is when the projectile returns to \\(y = 0\\) (assuming flat ground). Solve \\(y(t) = 0\\) : \\( \\(0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) \\) Factor out \\(t\\) : \\( \\(t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0\\) \\) Solutions: - \\(t = 0\\) (launch time) - \\(v_0 \\sin\\theta - \\frac{1}{2} g t = 0 \\implies t = \\frac{2 v_0 \\sin\\theta}{g}\\) Thus, time of flight: \\( \\(T = \\frac{2 v_0 \\sin\\theta}{g}\\) \\) Notes : \\(T\\) depends on \\(v_0\\) , \\(\\theta\\) , and \\(g\\) . At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(T\\) adjusts accordingly (minimal or maximal vertical motion). Range Notes : The range \\(R\\) is the horizontal distance at \\(t = T\\) . Substitute \\(T\\) into \\(x(t)\\) : \\( \\(R = x(T) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g}\\) \\) Use the trigonometric identity \\(2 \\sin\\theta \\cos\\theta = \\sin(2\\theta)\\) : \\( \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) \\) Notes : This is the key equation\u2014a family of solutions parameterized by \\(v_0\\) (initial speed), \\(\\theta\\) (angle), and \\(g\\) (gravity). It\u2019s symmetric about \\(\\theta = 45^\\circ\\) due to \\(\\sin(2\\theta)\\) . 2. Analysis of the Range Notes : Let\u2019s explore how \\(R\\) changes with its parameters. Angle ( \\(\\theta\\) ) : Since \\(\\sin(2\\theta)\\) ranges from 0 to 1: Maximum at \\(2\\theta = 90^\\circ \\implies \\theta = 45^\\circ\\) , where \\( \\(R_{\\text{max}} = \\frac{v_0^2}{g}\\) \\) Zero at \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) (no horizontal travel). Velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) , so doubling \\(v_0\\) quadruples \\(R\\) . Gravity ( \\(g\\) ) : \\(R \\propto \\frac{1}{g}\\) , so lower gravity (e.g., Moon\u2019s \\(g = 1.62 \\, \\text{m/s}^2\\) vs. Earth\u2019s \\(9.81 \\, \\text{m/s}^2\\) ) increases \\(R\\) . Notes : The \\(45^\\circ\\) optimum balances horizontal and vertical motion. Varying \\(v_0\\) or \\(g\\) scales the range, which we\u2019ll visualize. 3. Practical Applications Notes : This ideal model applies broadly but can be adapted: - Uneven Terrain : If landing at height \\(h\\) , solve \\(y(t) = h\\) , adjusting \\(T\\) and \\(R\\) . - Air Resistance : Add a drag force like \\( \\(F_d = -k v^2\\) \\) , requiring numerical methods (e.g., Euler or Runge-Kutta). - Real-World Examples : - Sports: A kicked soccer ball\u2019s range depends on \\(\\theta\\) and \\(v_0\\) , modified by spin. - Engineering: Rocket trajectories optimize \\(\\theta\\) for distance or orbit. Notes : These extensions show the model\u2019s versatility beyond the ideal case. 4. Implementation Notes : We\u2019ll simulate \\(R\\) vs. \\(\\theta\\) using Python, comparing different \\(v_0\\) and \\(g\\) values. import numpy as np import matplotlib.pyplot as plt # Constants g_earth = 9.81 # m/s^2 (Earth gravity) g_moon = 1.62 # m/s^2 (Moon gravity) v0 = 20.0 # m/s (initial speed) # Range function def range_projectile(v0, theta_deg, g): theta = np.radians(theta_deg) # Convert degrees to radians for sin/cos return (v0**2 * np.sin(2 * theta)) / g # Range formula # Angles from 0 to 90 degrees theta_deg = np.linspace(0, 90, 91) # 91 points for smooth curve # Compute ranges for different conditions R_earth = range_projectile(v0, theta_deg, g_earth) # Earth, base v0 R_moon = range_projectile(v0, theta_deg, g_moon) # Moon, base v0 R_v0_double = range_projectile(2 * v0, theta_deg, g_earth) # Earth, doubled v0 # Plotting plt.figure(figsize=(10, 6)) plt.plot(theta_deg, R_earth, label=f'Earth (g = {g_earth} m/s\u00b2, v0 = {v0} m/s)') plt.plot(theta_deg, R_moon, label=f'Moon (g = {g_moon} m/s\u00b2, v0 = {v0} m/s)') plt.plot(theta_deg, R_v0_double, label=f'Earth (g = {g_earth} m/s\u00b2, v0 = {2*v0} m/s)') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Projectile Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # Find and print maximum range on Earth max_idx = np.argmax(R_earth) print(f\"Max range on Earth: {R_earth[max_idx]:.2f} m at {theta_deg[max_idx]}\u00b0\") Notes on Code : - Function : range_projectile implements \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) , converting \\(\\theta\\) to radians. - Data : Computes \\(R\\) for \\(\\theta = 0^\\circ\\) to \\(90^\\circ\\) under three conditions: 1. Earth gravity, base speed. 2. Moon gravity, base speed (larger range due to lower \\(g\\) ). 3. Earth gravity, doubled speed (quadrupled range due to \\(v_0^2\\) ). - Plot : Visualizes the parabolic dependence on \\(\\theta\\) , peaking at \\(45^\\circ\\) . - Output : Confirms the max range numerically. Discussion on Limitations Notes : The model assumes: - No air resistance (drag would reduce \\(R\\) , especially at high \\(v_0\\) ). - Flat terrain (height changes alter \\(T\\) and \\(R\\) ). - Constant \\(g\\) (true near Earth\u2019s surface, less so for high altitudes). Improvements : - Drag : Add \\( \\(F_d = -k v^2\\) \\) and solve numerically. - Terrain : Adjust for \\(y(t) = h\\) , modifying \\(T\\) . - Wind : Include a horizontal velocity term. Notes : These extensions make the model more realistic, connecting it to practical physics problems. Rendering and Running in VS Code File : Save as projectile_motion.md . Rendering : With \"Markdown+Math\" installed, preview ( Ctrl+Shift+V ) should show \\(inline\\) and \\( \\(block\\) \\) equations nicely. Code : Extract the Python to projectile.py or run in a Jupyter notebook (install \"Jupyter\" extension, create .ipynb , paste code into a cell). Requirements : Install numpy and matplotlib ( pip install numpy matplotlib ). Output Notes The plot will show three curves, with peaks at \\(45^\\circ\\) . Max range on Earth (at \\(v_0 = 20 \\, \\text{m/s}\\) , \\(g = 9.81 \\, \\text{m/s}^2\\) ) is about 40.77 m, confirming \\(R_{\\text{max}} = \\frac{v_0^2}{g} = \\frac{400}{9.81}\\) .","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is a classic physics problem where an object moves under gravity alone after an initial launch. We\u2019ll derive the equations from Newton\u2019s laws, assuming constant gravitational acceleration \\(g\\) .","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations","text":"Notes : We start with a projectile launched from the origin \\((x_0, y_0) = (0, 0)\\) with initial speed \\(v_0\\) at angle \\(\\theta\\) . The velocity splits into horizontal and vertical components, and gravity only acts downward. Initial velocity components: \\(v_{x0} = v_0 \\cos\\theta\\) (horizontal, constant since no horizontal acceleration) \\(v_{y0} = v_0 \\sin\\theta\\) (vertical, affected by gravity) Acceleration: \\(a_x = 0\\) (no horizontal force) \\(a_y = -g\\) (gravity downward) Using kinematic equations \\(x(t) = x_0 + v_{x0}t + \\frac{1}{2}a_x t^2\\) and \\(y(t) = y_0 + v_{y0}t + \\frac{1}{2}a_y t^2\\) : - Horizontal: \\( \\(x(t) = v_0 \\cos\\theta \\cdot t\\) \\) - Vertical: \\( \\(y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) \\) Notes : These are the parametric equations of motion. The horizontal motion is linear (constant velocity), while the vertical motion is quadratic (parabolic due to gravity).","title":"Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"Notes : The time of flight \\(T\\) is when the projectile returns to \\(y = 0\\) (assuming flat ground). Solve \\(y(t) = 0\\) : \\( \\(0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) \\) Factor out \\(t\\) : \\( \\(t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0\\) \\) Solutions: - \\(t = 0\\) (launch time) - \\(v_0 \\sin\\theta - \\frac{1}{2} g t = 0 \\implies t = \\frac{2 v_0 \\sin\\theta}{g}\\) Thus, time of flight: \\( \\(T = \\frac{2 v_0 \\sin\\theta}{g}\\) \\) Notes : \\(T\\) depends on \\(v_0\\) , \\(\\theta\\) , and \\(g\\) . At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(T\\) adjusts accordingly (minimal or maximal vertical motion).","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range","text":"Notes : The range \\(R\\) is the horizontal distance at \\(t = T\\) . Substitute \\(T\\) into \\(x(t)\\) : \\( \\(R = x(T) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g}\\) \\) Use the trigonometric identity \\(2 \\sin\\theta \\cos\\theta = \\sin(2\\theta)\\) : \\( \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) \\) Notes : This is the key equation\u2014a family of solutions parameterized by \\(v_0\\) (initial speed), \\(\\theta\\) (angle), and \\(g\\) (gravity). It\u2019s symmetric about \\(\\theta = 45^\\circ\\) due to \\(\\sin(2\\theta)\\) .","title":"Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"Notes : Let\u2019s explore how \\(R\\) changes with its parameters. Angle ( \\(\\theta\\) ) : Since \\(\\sin(2\\theta)\\) ranges from 0 to 1: Maximum at \\(2\\theta = 90^\\circ \\implies \\theta = 45^\\circ\\) , where \\( \\(R_{\\text{max}} = \\frac{v_0^2}{g}\\) \\) Zero at \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) (no horizontal travel). Velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) , so doubling \\(v_0\\) quadruples \\(R\\) . Gravity ( \\(g\\) ) : \\(R \\propto \\frac{1}{g}\\) , so lower gravity (e.g., Moon\u2019s \\(g = 1.62 \\, \\text{m/s}^2\\) vs. Earth\u2019s \\(9.81 \\, \\text{m/s}^2\\) ) increases \\(R\\) . Notes : The \\(45^\\circ\\) optimum balances horizontal and vertical motion. Varying \\(v_0\\) or \\(g\\) scales the range, which we\u2019ll visualize.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Notes : This ideal model applies broadly but can be adapted: - Uneven Terrain : If landing at height \\(h\\) , solve \\(y(t) = h\\) , adjusting \\(T\\) and \\(R\\) . - Air Resistance : Add a drag force like \\( \\(F_d = -k v^2\\) \\) , requiring numerical methods (e.g., Euler or Runge-Kutta). - Real-World Examples : - Sports: A kicked soccer ball\u2019s range depends on \\(\\theta\\) and \\(v_0\\) , modified by spin. - Engineering: Rocket trajectories optimize \\(\\theta\\) for distance or orbit. Notes : These extensions show the model\u2019s versatility beyond the ideal case.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Notes : We\u2019ll simulate \\(R\\) vs. \\(\\theta\\) using Python, comparing different \\(v_0\\) and \\(g\\) values. import numpy as np import matplotlib.pyplot as plt # Constants g_earth = 9.81 # m/s^2 (Earth gravity) g_moon = 1.62 # m/s^2 (Moon gravity) v0 = 20.0 # m/s (initial speed) # Range function def range_projectile(v0, theta_deg, g): theta = np.radians(theta_deg) # Convert degrees to radians for sin/cos return (v0**2 * np.sin(2 * theta)) / g # Range formula # Angles from 0 to 90 degrees theta_deg = np.linspace(0, 90, 91) # 91 points for smooth curve # Compute ranges for different conditions R_earth = range_projectile(v0, theta_deg, g_earth) # Earth, base v0 R_moon = range_projectile(v0, theta_deg, g_moon) # Moon, base v0 R_v0_double = range_projectile(2 * v0, theta_deg, g_earth) # Earth, doubled v0 # Plotting plt.figure(figsize=(10, 6)) plt.plot(theta_deg, R_earth, label=f'Earth (g = {g_earth} m/s\u00b2, v0 = {v0} m/s)') plt.plot(theta_deg, R_moon, label=f'Moon (g = {g_moon} m/s\u00b2, v0 = {v0} m/s)') plt.plot(theta_deg, R_v0_double, label=f'Earth (g = {g_earth} m/s\u00b2, v0 = {2*v0} m/s)') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Projectile Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # Find and print maximum range on Earth max_idx = np.argmax(R_earth) print(f\"Max range on Earth: {R_earth[max_idx]:.2f} m at {theta_deg[max_idx]}\u00b0\") Notes on Code : - Function : range_projectile implements \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) , converting \\(\\theta\\) to radians. - Data : Computes \\(R\\) for \\(\\theta = 0^\\circ\\) to \\(90^\\circ\\) under three conditions: 1. Earth gravity, base speed. 2. Moon gravity, base speed (larger range due to lower \\(g\\) ). 3. Earth gravity, doubled speed (quadrupled range due to \\(v_0^2\\) ). - Plot : Visualizes the parabolic dependence on \\(\\theta\\) , peaking at \\(45^\\circ\\) . - Output : Confirms the max range numerically.","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion-on-limitations","text":"Notes : The model assumes: - No air resistance (drag would reduce \\(R\\) , especially at high \\(v_0\\) ). - Flat terrain (height changes alter \\(T\\) and \\(R\\) ). - Constant \\(g\\) (true near Earth\u2019s surface, less so for high altitudes). Improvements : - Drag : Add \\( \\(F_d = -k v^2\\) \\) and solve numerically. - Terrain : Adjust for \\(y(t) = h\\) , modifying \\(T\\) . - Wind : Include a horizontal velocity term. Notes : These extensions make the model more realistic, connecting it to practical physics problems.","title":"Discussion on Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#rendering-and-running-in-vs-code","text":"File : Save as projectile_motion.md . Rendering : With \"Markdown+Math\" installed, preview ( Ctrl+Shift+V ) should show \\(inline\\) and \\( \\(block\\) \\) equations nicely. Code : Extract the Python to projectile.py or run in a Jupyter notebook (install \"Jupyter\" extension, create .ipynb , paste code into a cell). Requirements : Install numpy and matplotlib ( pip install numpy matplotlib ).","title":"Rendering and Running in VS Code"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output-notes","text":"The plot will show three curves, with peaks at \\(45^\\circ\\) . Max range on Earth (at \\(v_0 = 20 \\, \\text{m/s}\\) , \\(g = 9.81 \\, \\text{m/s}^2\\) ) is about 40.77 m, confirming \\(R_{\\text{max}} = \\frac{v_0^2}{g} = \\frac{400}{9.81}\\) .","title":"Output Notes"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The forced damped pendulum is a nonlinear system showcasing rich dynamics due to damping, gravity, and external periodic forcing. Let\u2019s derive its governing equation and solutions. Governing Differential Equation Notes : Consider a pendulum of length \\(l\\) with mass \\(m\\) at angle \\(\\theta\\) from the vertical. It experiences gravitational restoring force, damping (proportional to velocity), and an external periodic force. The torque equation is: \\( \\(I \\frac{d^2\\theta}{dt^2} = -mg l \\sin\\theta - b \\frac{d\\theta}{dt} + F_0 \\cos(\\omega t)\\) \\) Where: - \\(I = m l^2\\) (moment of inertia), - \\(-mg l \\sin\\theta\\) (gravitational torque), - \\(-b \\frac{d\\theta}{dt}\\) (damping torque, \\(b\\) is the damping coefficient), - \\(F_0 \\cos(\\omega t)\\) (external torque, amplitude \\(F_0\\) , frequency \\(\\omega\\) ). Divide by \\(I = m l^2\\) : \\( \\(\\frac{d^2\\theta}{dt^2} = -\\frac{g}{l} \\sin\\theta - \\frac{b}{m l^2} \\frac{d\\theta}{dt} + \\frac{F_0}{m l^2} \\cos(\\omega t)\\) \\) Define: - \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) (natural frequency), - \\(\\beta = \\frac{b}{2 m l^2}\\) (damping constant), - \\(A = \\frac{F_0}{m l^2}\\) (driving amplitude per unit moment). The standard form becomes: \\( \\(\\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t)\\) \\) Notes : This is a nonlinear ODE due to \\(\\sin\\theta\\) . It reduces to a damped driven harmonic oscillator for small \\(\\theta\\) . Small-Angle Approximation Notes : For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to: \\( \\(\\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t)\\) \\) This is a linear, second-order ODE. The solution has: - Homogeneous part : Damped oscillator, \\(\\theta_h(t) = e^{-\\beta t} (C_1 \\cos(\\omega_d t) + C_2 \\sin(\\omega_d t))\\) , where \\(\\omega_d = \\sqrt{\\omega_0^2 - \\beta^2}\\) (underdamped case, \\(\\beta < \\omega_0\\) ). - Particular part : Steady-state oscillation, \\(\\theta_p(t) = B \\cos(\\omega t - \\phi)\\) , where amplitude \\(B = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (2\\beta\\omega)^2}}\\) and phase \\(\\phi = \\tan^{-1}\\left(\\frac{2\\beta\\omega}{\\omega_0^2 - \\omega^2}\\right)\\) . Notes : The full solution is \\(\\theta(t) = \\theta_h + \\theta_p\\) , with transients decaying, leaving the driven oscillation. Resonance Notes : Resonance occurs when driving frequency \\(\\omega \\approx \\omega_d\\) . For weak damping ( \\(\\beta \\ll \\omega_0\\) ), \\(\\omega_d \\approx \\omega_0\\) , and \\(B\\) peaks when \\(\\omega \\approx \\omega_0\\) , amplifying energy input: \\( \\(B_{\\text{max}} \\approx \\frac{A}{2\\beta\\omega_0}\\) \\) Notes : Resonance boosts amplitude but is limited by damping. 2. Analysis of Dynamics Notes : The full nonlinear equation exhibits varied behavior: - Damping ( \\(\\beta\\) ) : Higher \\(\\beta\\) reduces amplitude and prevents chaos by dissipating energy. - Driving Amplitude ( \\(A\\) ) : Low \\(A\\) yields periodic motion; high \\(A\\) can drive chaos. - Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance occurs; far from \\(\\omega_0\\) , motion may become quasiperiodic or chaotic. Transition to Chaos : In the nonlinear case, increasing \\(A\\) or tuning \\(\\omega\\) can lead to period-doubling bifurcations, then chaos\u2014irregular, unpredictable motion sensitive to initial conditions. Notes : Chaos reflects the interplay of nonlinearity ( \\(\\sin\\theta\\) ) and forcing, a hallmark of complex systems. 3. Practical Applications Notes : This model applies to: - Energy Harvesting : Pendulum-based devices convert vibrations to electricity. - Suspension Bridges : Oscillations from wind (forcing) and damping design. - Circuits : Driven RLC circuits mimic this behavior (angle \\(\\theta\\) as charge). Notes : Understanding chaos aids in stabilizing or harnessing these systems. 4. Implementation Notes : We\u2019ll simulate the nonlinear equation using the Runge-Kutta method (RK4) to capture periodic, resonant, and chaotic regimes, then plot phase portraits and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Parameters g = 9.81 # m/s^2 l = 1.0 # m omega0 = np.sqrt(g / l) # Natural frequency beta = 0.1 # Damping constant (adjustable) A = 1.5 # Driving amplitude (adjust for chaos) omega = 2/3 * omega0 # Driving frequency (tune for resonance/chaos) # Nonlinear pendulum ODE def pendulum_deriv(state, t, beta, omega0, A, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -omega0**2 * np.sin(theta) - 2*beta*theta_dot + A*np.cos(omega*t) return [dtheta_dt, dtheta_dot_dt] # Time array t = np.linspace(0, 100, 10000) # Long time for steady-state # Initial conditions theta0 = 0.1 # rad theta_dot0 = 0.0 # rad/s state0 = [theta0, theta_dot0] # Solve ODE for different cases # Case 1: Weak forcing (periodic) sol1 = odeint(pendulum_deriv, state0, t, args=(0.1, omega0, 0.5, 2/3*omega0)) theta1, theta_dot1 = sol1.T # Case 2: Resonance (omega near omega0) sol2 = odeint(pendulum_deriv, state0, t, args=(0.1, omega0, 1.0, omega0)) theta2, theta_dot2 = sol2.T # Case 3: Strong forcing (chaotic) sol3 = odeint(pendulum_deriv, state0, t, args=(0.1, omega0, 1.5, 2/3*omega0)) theta3, theta_dot3 = sol3.T # Poincar\u00e9 section (sample at driving period) T_drive = 2*np.pi / omega idx_poincare = np.arange(0, len(t), int(T_drive / (t[1] - t[0]))) poincare_theta = theta3[idx_poincare] poincare_theta_dot = theta_dot3[idx_poincare] # Plotting plt.figure(figsize=(15, 10)) # Time series plt.subplot(2, 2, 1) plt.plot(t[:500], theta1[:500], label='Weak (A=0.5)') plt.plot(t[:500], theta2[:500], label='Resonance (\u03c9\u2248\u03c90)') plt.plot(t[:500], theta3[:500], label='Chaotic (A=1.5)') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Time Series') plt.legend() # Phase portrait (chaotic case) plt.subplot(2, 2, 2) plt.plot(theta3, theta_dot3, 'b-', lw=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait (Chaotic)') # Poincar\u00e9 section (chaotic case) plt.subplot(2, 2, 3) plt.scatter(poincare_theta, poincare_theta_dot, s=1, c='r') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Poincar\u00e9 Section (Chaotic)') plt.tight_layout() plt.show() Notes on Code : - ODE : Defines the nonlinear equation as a first-order system: \\(\\frac{d\\theta}{dt} = \\dot{\\theta}\\) , \\(\\frac{d\\dot{\\theta}}{dt} = -\\omega_0^2 \\sin\\theta - 2\\beta \\dot{\\theta} + A \\cos(\\omega t)\\) . - Solver : Uses odeint (RK4-based) for accuracy. - Cases : 1. Weak forcing ( \\(A = 0.5\\) ): Periodic motion. 2. Resonance ( \\(\\omega \\approx \\omega_0\\) ): Large amplitude. 3. Strong forcing ( \\(A = 1.5\\) , \\(\\omega = \\frac{2}{3}\\omega_0\\) ): Chaotic motion. - Plots : - Time series: Shows oscillation types. - Phase portrait: Trajectories in \\(\\theta\\) vs. \\(\\dot{\\theta}\\) (chaotic case loops irregularly). - Poincar\u00e9 section: Samples at driving period, revealing chaos as scattered points. Discussion on Limitations Notes : The model assumes: - Constant \\(g\\) , \\(l\\) , and linear damping. - Periodic forcing only. Extensions : - Nonlinear Damping : Use \\( \\(F_d = -b |\\dot{\\theta}| \\dot{\\theta}\\) \\) for realism. - Non-Periodic Forcing : Random or multi-frequency driving. - Bifurcation : Vary \\(A\\) systematically for a bifurcation diagram (period-doubling to chaos). Notes : These enhance applicability to complex systems like climate or biomechanics. Rendering and Running in VS Code File : Save as forced_pendulum.md . Rendering : Use \"Markdown+Math\" extension; preview with Ctrl+Shift+V . Code : Extract Python to forced_pendulum.py or use a .ipynb file with the \"Jupyter\" extension. Requirements : Install numpy , matplotlib , scipy ( pip install numpy matplotlib scipy ). Output Notes Time Series : Weak forcing is periodic, resonance amplifies, chaos is erratic. Phase Portrait : Chaotic case shows a tangled trajectory. Poincar\u00e9 Section : Scattered points confirm chaos.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is a nonlinear system showcasing rich dynamics due to damping, gravity, and external periodic forcing. Let\u2019s derive its governing equation and solutions.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-differential-equation","text":"Notes : Consider a pendulum of length \\(l\\) with mass \\(m\\) at angle \\(\\theta\\) from the vertical. It experiences gravitational restoring force, damping (proportional to velocity), and an external periodic force. The torque equation is: \\( \\(I \\frac{d^2\\theta}{dt^2} = -mg l \\sin\\theta - b \\frac{d\\theta}{dt} + F_0 \\cos(\\omega t)\\) \\) Where: - \\(I = m l^2\\) (moment of inertia), - \\(-mg l \\sin\\theta\\) (gravitational torque), - \\(-b \\frac{d\\theta}{dt}\\) (damping torque, \\(b\\) is the damping coefficient), - \\(F_0 \\cos(\\omega t)\\) (external torque, amplitude \\(F_0\\) , frequency \\(\\omega\\) ). Divide by \\(I = m l^2\\) : \\( \\(\\frac{d^2\\theta}{dt^2} = -\\frac{g}{l} \\sin\\theta - \\frac{b}{m l^2} \\frac{d\\theta}{dt} + \\frac{F_0}{m l^2} \\cos(\\omega t)\\) \\) Define: - \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) (natural frequency), - \\(\\beta = \\frac{b}{2 m l^2}\\) (damping constant), - \\(A = \\frac{F_0}{m l^2}\\) (driving amplitude per unit moment). The standard form becomes: \\( \\(\\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t)\\) \\) Notes : This is a nonlinear ODE due to \\(\\sin\\theta\\) . It reduces to a damped driven harmonic oscillator for small \\(\\theta\\) .","title":"Governing Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"Notes : For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to: \\( \\(\\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t)\\) \\) This is a linear, second-order ODE. The solution has: - Homogeneous part : Damped oscillator, \\(\\theta_h(t) = e^{-\\beta t} (C_1 \\cos(\\omega_d t) + C_2 \\sin(\\omega_d t))\\) , where \\(\\omega_d = \\sqrt{\\omega_0^2 - \\beta^2}\\) (underdamped case, \\(\\beta < \\omega_0\\) ). - Particular part : Steady-state oscillation, \\(\\theta_p(t) = B \\cos(\\omega t - \\phi)\\) , where amplitude \\(B = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (2\\beta\\omega)^2}}\\) and phase \\(\\phi = \\tan^{-1}\\left(\\frac{2\\beta\\omega}{\\omega_0^2 - \\omega^2}\\right)\\) . Notes : The full solution is \\(\\theta(t) = \\theta_h + \\theta_p\\) , with transients decaying, leaving the driven oscillation.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Notes : Resonance occurs when driving frequency \\(\\omega \\approx \\omega_d\\) . For weak damping ( \\(\\beta \\ll \\omega_0\\) ), \\(\\omega_d \\approx \\omega_0\\) , and \\(B\\) peaks when \\(\\omega \\approx \\omega_0\\) , amplifying energy input: \\( \\(B_{\\text{max}} \\approx \\frac{A}{2\\beta\\omega_0}\\) \\) Notes : Resonance boosts amplitude but is limited by damping.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"Notes : The full nonlinear equation exhibits varied behavior: - Damping ( \\(\\beta\\) ) : Higher \\(\\beta\\) reduces amplitude and prevents chaos by dissipating energy. - Driving Amplitude ( \\(A\\) ) : Low \\(A\\) yields periodic motion; high \\(A\\) can drive chaos. - Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance occurs; far from \\(\\omega_0\\) , motion may become quasiperiodic or chaotic. Transition to Chaos : In the nonlinear case, increasing \\(A\\) or tuning \\(\\omega\\) can lead to period-doubling bifurcations, then chaos\u2014irregular, unpredictable motion sensitive to initial conditions. Notes : Chaos reflects the interplay of nonlinearity ( \\(\\sin\\theta\\) ) and forcing, a hallmark of complex systems.","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Notes : This model applies to: - Energy Harvesting : Pendulum-based devices convert vibrations to electricity. - Suspension Bridges : Oscillations from wind (forcing) and damping design. - Circuits : Driven RLC circuits mimic this behavior (angle \\(\\theta\\) as charge). Notes : Understanding chaos aids in stabilizing or harnessing these systems.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"Notes : We\u2019ll simulate the nonlinear equation using the Runge-Kutta method (RK4) to capture periodic, resonant, and chaotic regimes, then plot phase portraits and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Parameters g = 9.81 # m/s^2 l = 1.0 # m omega0 = np.sqrt(g / l) # Natural frequency beta = 0.1 # Damping constant (adjustable) A = 1.5 # Driving amplitude (adjust for chaos) omega = 2/3 * omega0 # Driving frequency (tune for resonance/chaos) # Nonlinear pendulum ODE def pendulum_deriv(state, t, beta, omega0, A, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -omega0**2 * np.sin(theta) - 2*beta*theta_dot + A*np.cos(omega*t) return [dtheta_dt, dtheta_dot_dt] # Time array t = np.linspace(0, 100, 10000) # Long time for steady-state # Initial conditions theta0 = 0.1 # rad theta_dot0 = 0.0 # rad/s state0 = [theta0, theta_dot0] # Solve ODE for different cases # Case 1: Weak forcing (periodic) sol1 = odeint(pendulum_deriv, state0, t, args=(0.1, omega0, 0.5, 2/3*omega0)) theta1, theta_dot1 = sol1.T # Case 2: Resonance (omega near omega0) sol2 = odeint(pendulum_deriv, state0, t, args=(0.1, omega0, 1.0, omega0)) theta2, theta_dot2 = sol2.T # Case 3: Strong forcing (chaotic) sol3 = odeint(pendulum_deriv, state0, t, args=(0.1, omega0, 1.5, 2/3*omega0)) theta3, theta_dot3 = sol3.T # Poincar\u00e9 section (sample at driving period) T_drive = 2*np.pi / omega idx_poincare = np.arange(0, len(t), int(T_drive / (t[1] - t[0]))) poincare_theta = theta3[idx_poincare] poincare_theta_dot = theta_dot3[idx_poincare] # Plotting plt.figure(figsize=(15, 10)) # Time series plt.subplot(2, 2, 1) plt.plot(t[:500], theta1[:500], label='Weak (A=0.5)') plt.plot(t[:500], theta2[:500], label='Resonance (\u03c9\u2248\u03c90)') plt.plot(t[:500], theta3[:500], label='Chaotic (A=1.5)') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Time Series') plt.legend() # Phase portrait (chaotic case) plt.subplot(2, 2, 2) plt.plot(theta3, theta_dot3, 'b-', lw=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait (Chaotic)') # Poincar\u00e9 section (chaotic case) plt.subplot(2, 2, 3) plt.scatter(poincare_theta, poincare_theta_dot, s=1, c='r') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Poincar\u00e9 Section (Chaotic)') plt.tight_layout() plt.show() Notes on Code : - ODE : Defines the nonlinear equation as a first-order system: \\(\\frac{d\\theta}{dt} = \\dot{\\theta}\\) , \\(\\frac{d\\dot{\\theta}}{dt} = -\\omega_0^2 \\sin\\theta - 2\\beta \\dot{\\theta} + A \\cos(\\omega t)\\) . - Solver : Uses odeint (RK4-based) for accuracy. - Cases : 1. Weak forcing ( \\(A = 0.5\\) ): Periodic motion. 2. Resonance ( \\(\\omega \\approx \\omega_0\\) ): Large amplitude. 3. Strong forcing ( \\(A = 1.5\\) , \\(\\omega = \\frac{2}{3}\\omega_0\\) ): Chaotic motion. - Plots : - Time series: Shows oscillation types. - Phase portrait: Trajectories in \\(\\theta\\) vs. \\(\\dot{\\theta}\\) (chaotic case loops irregularly). - Poincar\u00e9 section: Samples at driving period, revealing chaos as scattered points.","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#discussion-on-limitations","text":"Notes : The model assumes: - Constant \\(g\\) , \\(l\\) , and linear damping. - Periodic forcing only. Extensions : - Nonlinear Damping : Use \\( \\(F_d = -b |\\dot{\\theta}| \\dot{\\theta}\\) \\) for realism. - Non-Periodic Forcing : Random or multi-frequency driving. - Bifurcation : Vary \\(A\\) systematically for a bifurcation diagram (period-doubling to chaos). Notes : These enhance applicability to complex systems like climate or biomechanics.","title":"Discussion on Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#rendering-and-running-in-vs-code","text":"File : Save as forced_pendulum.md . Rendering : Use \"Markdown+Math\" extension; preview with Ctrl+Shift+V . Code : Extract Python to forced_pendulum.py or use a .ipynb file with the \"Jupyter\" extension. Requirements : Install numpy , matplotlib , scipy ( pip install numpy matplotlib scipy ).","title":"Rendering and Running in VS Code"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#output-notes","text":"Time Series : Weak forcing is periodic, resonance amplifies, chaos is erratic. Phase Portrait : Chaotic case shows a tangled trajectory. Poincar\u00e9 Section : Scattered points confirm chaos.","title":"Output Notes"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius 1. Theoretical Foundation Kepler\u2019s Third Law connects a planet\u2019s orbital period to its distance from the central body, revealing the elegance of gravitational dynamics. Let\u2019s derive it for circular orbits. Derivation of Kepler\u2019s Third Law Notes : Consider a body of mass \\(m\\) in a circular orbit of radius \\(r\\) around a central mass \\(M\\) (where \\(M \\gg m\\) , so the central body is effectively fixed). Two forces balance: gravitational attraction and centripetal force required for circular motion. Gravitational Force : Newton\u2019s law gives: \\( \\(F_g = \\frac{G M m}{r^2}\\) \\) where \\(G\\) is the gravitational constant. Centripetal Force : For circular motion with orbital speed \\(v\\) and period \\(T\\) (time for one orbit): \\( \\(F_c = \\frac{m v^2}{r}, \\quad v = \\frac{2\\pi r}{T}\\) \\) Substitute \\(v\\) : \\( \\(F_c = \\frac{m}{r} \\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{m 4\\pi^2 r^2}{r T^2} = \\frac{4\\pi^2 m r}{T^2}\\) \\) Equate \\(F_g = F_c\\) : \\( \\(\\frac{G M m}{r^2} = \\frac{4\\pi^2 m r}{T^2}\\) \\) Cancel \\(m\\) (since \\(m \\neq 0\\) ): \\( \\(\\frac{G M}{r^2} = \\frac{4\\pi^2 r}{T^2}\\) \\) Multiply both sides by \\(T^2\\) and divide by \\(r\\) : \\( \\(\\frac{G M T^2}{r^3} = 4\\pi^2\\) \\) Rearrange: \\( \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) \\) Notes : This is Kepler\u2019s Third Law for circular orbits: \\(T^2 \\propto r^3\\) , with the constant \\(\\frac{4\\pi^2}{G M}\\) depending only on the central mass \\(M\\) . 2. Implications for Astronomy Notes : This relationship is a powerful tool: - Planetary Masses : If \\(T\\) and \\(r\\) are measured for a satellite (e.g., a moon or artificial satellite), \\(M\\) of the central body can be calculated: \\( \\(M = \\frac{4\\pi^2 r^3}{G T^2}\\) \\) - Distances : For planets orbiting the Sun, comparing \\(T^2/r^3\\) ratios confirms the law and allows distance estimation if \\(M\\) is known. - Universality : Applies to any gravitational system (planets, moons, binary stars). Examples : - Moon around Earth : \\(T \\approx 27.32\\) days, \\(r \\approx 384,400\\) km, used to estimate Earth\u2019s mass. - Earth around Sun : \\(T = 1\\) year, \\(r = 1\\) AU, calibrates the Sun\u2019s mass. Notes : It\u2019s foundational for orbit design (e.g., geostationary satellites) and exoplanet studies. 3. Analysis of Real-World Examples Notes : Let\u2019s verify with data: - Moon : \\(T = 27.32\\) days = \\(2.36 \\times 10^6\\) s, \\(r = 3.844 \\times 10^8\\) m, \\(G = 6.6743 \\times 10^{-11}\\) m\u00b3/kg\u00b7s\u00b2, Earth\u2019s \\(M \\approx 5.972 \\times 10^{24}\\) kg. - \\(T^2 = (2.36 \\times 10^6)^2 = 5.57 \\times 10^{12}\\) s\u00b2 - \\(r^3 = (3.844 \\times 10^8)^3 = 5.68 \\times 10^{25}\\) m\u00b3 - Check: \\(\\frac{4\\pi^2}{G M} = \\frac{39.478}{6.6743 \\times 10^{-11} \\cdot 5.972 \\times 10^{24}} \\approx 9.91 \\times 10^{-14}\\) s\u00b2/m\u00b3 - \\(T^2 / r^3 = 5.57 \\times 10^{12} / 5.68 \\times 10^{25} \\approx 9.8 \\times 10^{-14}\\) s\u00b2/m\u00b3\u2014matches closely! Notes : Small discrepancies reflect measurement precision or circular orbit assumption. 4. Implementation Notes : We\u2019ll simulate circular orbits and plot \\(T^2\\) vs. \\(r^3\\) to verify the law. import numpy as np import matplotlib.pyplot as plt # Constants G = 6.6743e-11 # m^3/kg\u00b7s^2 M_earth = 5.972e24 # kg M_sun = 1.989e30 # kg # Orbital period function def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Orbital radii (m) r_values = np.logspace(6, 9, 100) # 10^6 to 10^9 m # Compute periods T_earth = orbital_period(r_values, M_earth) # Around Earth T_sun = orbital_period(r_values, M_sun) # Around Sun # Plot T^2 vs r^3 plt.figure(figsize=(12, 6)) # Log-log plot plt.subplot(1, 2, 1) plt.loglog(r_values**3, T_earth**2, 'b-', label='Earth (M = 5.972e24 kg)') plt.loglog(r_values**3, T_sun**2, 'r-', label='Sun (M = 1.989e30 kg)') plt.xlabel('r\u00b3 (m\u00b3)') plt.ylabel('T\u00b2 (s\u00b2)') plt.title('T\u00b2 vs r\u00b3 (Kepler\\'s Third Law)') plt.grid(True, which=\"both\", ls=\"--\") plt.legend() # Circular orbit visualization (Moon example) r_moon = 3.844e8 # m T_moon = orbital_period(r_moon, M_earth) theta = np.linspace(0, 2*np.pi, 100) x_moon = r_moon * np.cos(theta) y_moon = r_moon * np.sin(theta) plt.subplot(1, 2, 2) plt.plot(x_moon, y_moon, 'b-', label=f'Moon Orbit (r = {r_moon/1e6:.1f} Mm)') plt.plot(0, 0, 'ko', label='Earth') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Circular Orbit Visualization') plt.axis('equal') plt.legend() plt.tight_layout() plt.show() # Verify with Moon data print(f\"Moon: T = {T_moon/86400:.2f} days, r = {r_moon/1e6:.1f} Mm\") Notes on Code : - Function : orbital_period computes \\(T = \\sqrt{\\frac{4\\pi^2 r^3}{G M}}\\) . - Data : \\(r\\) spans realistic ranges; \\(T\\) calculated for Earth and Sun. - Plots : - Left: Log-log \\(T^2\\) vs. \\(r^3\\) \u2014a straight line confirms \\(T^2 \\propto r^3\\) . - Right: Visualizes the Moon\u2019s orbit as a circle. - Verification : Moon\u2019s \\(T\\) matches ~27 days. Discussion on Extensions Notes : - Elliptical Orbits : Kepler\u2019s Third Law generalizes to \\(T^2 = \\frac{4\\pi^2}{G M} a^3\\) , where \\(a\\) is the semi-major axis. The derivation uses angular momentum and energy conservation, not circular motion. - Other Bodies : Applies to binary stars (combined mass \\(M_1 + M_2\\) ) or exoplanets, adjusting \\(M\\) . Limitations : - Assumes \\(M \\gg m\\) (central mass dominates). - Ignores perturbations (e.g., other planets). Notes : Elliptical extension broadens applicability to most orbits. Rendering and Running in VS Code File : Save as orbital_period.md . Rendering : Use \"Markdown+Math\" extension; preview with Ctrl+Shift+V . Code : Extract to orbital_period.py or use a .ipynb with the \"Jupyter\" extension. Requirements : Install numpy , matplotlib ( pip install numpy matplotlib ). Output Notes Graph : \\(T^2\\) vs. \\(r^3\\) is linear on a log-log scale, slope depends on \\(M\\) . Orbit : Moon\u2019s path is circular, visually confirming the setup. Moon Data : \\(T \\approx 27.32\\) days matches reality. This solution fully explores Kepler\u2019s Third Law with theory, examples, and simulation.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"Kepler\u2019s Third Law connects a planet\u2019s orbital period to its distance from the central body, revealing the elegance of gravitational dynamics. Let\u2019s derive it for circular orbits.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law","text":"Notes : Consider a body of mass \\(m\\) in a circular orbit of radius \\(r\\) around a central mass \\(M\\) (where \\(M \\gg m\\) , so the central body is effectively fixed). Two forces balance: gravitational attraction and centripetal force required for circular motion. Gravitational Force : Newton\u2019s law gives: \\( \\(F_g = \\frac{G M m}{r^2}\\) \\) where \\(G\\) is the gravitational constant. Centripetal Force : For circular motion with orbital speed \\(v\\) and period \\(T\\) (time for one orbit): \\( \\(F_c = \\frac{m v^2}{r}, \\quad v = \\frac{2\\pi r}{T}\\) \\) Substitute \\(v\\) : \\( \\(F_c = \\frac{m}{r} \\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{m 4\\pi^2 r^2}{r T^2} = \\frac{4\\pi^2 m r}{T^2}\\) \\) Equate \\(F_g = F_c\\) : \\( \\(\\frac{G M m}{r^2} = \\frac{4\\pi^2 m r}{T^2}\\) \\) Cancel \\(m\\) (since \\(m \\neq 0\\) ): \\( \\(\\frac{G M}{r^2} = \\frac{4\\pi^2 r}{T^2}\\) \\) Multiply both sides by \\(T^2\\) and divide by \\(r\\) : \\( \\(\\frac{G M T^2}{r^3} = 4\\pi^2\\) \\) Rearrange: \\( \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) \\) Notes : This is Kepler\u2019s Third Law for circular orbits: \\(T^2 \\propto r^3\\) , with the constant \\(\\frac{4\\pi^2}{G M}\\) depending only on the central mass \\(M\\) .","title":"Derivation of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-implications-for-astronomy","text":"Notes : This relationship is a powerful tool: - Planetary Masses : If \\(T\\) and \\(r\\) are measured for a satellite (e.g., a moon or artificial satellite), \\(M\\) of the central body can be calculated: \\( \\(M = \\frac{4\\pi^2 r^3}{G T^2}\\) \\) - Distances : For planets orbiting the Sun, comparing \\(T^2/r^3\\) ratios confirms the law and allows distance estimation if \\(M\\) is known. - Universality : Applies to any gravitational system (planets, moons, binary stars). Examples : - Moon around Earth : \\(T \\approx 27.32\\) days, \\(r \\approx 384,400\\) km, used to estimate Earth\u2019s mass. - Earth around Sun : \\(T = 1\\) year, \\(r = 1\\) AU, calibrates the Sun\u2019s mass. Notes : It\u2019s foundational for orbit design (e.g., geostationary satellites) and exoplanet studies.","title":"2. Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-analysis-of-real-world-examples","text":"Notes : Let\u2019s verify with data: - Moon : \\(T = 27.32\\) days = \\(2.36 \\times 10^6\\) s, \\(r = 3.844 \\times 10^8\\) m, \\(G = 6.6743 \\times 10^{-11}\\) m\u00b3/kg\u00b7s\u00b2, Earth\u2019s \\(M \\approx 5.972 \\times 10^{24}\\) kg. - \\(T^2 = (2.36 \\times 10^6)^2 = 5.57 \\times 10^{12}\\) s\u00b2 - \\(r^3 = (3.844 \\times 10^8)^3 = 5.68 \\times 10^{25}\\) m\u00b3 - Check: \\(\\frac{4\\pi^2}{G M} = \\frac{39.478}{6.6743 \\times 10^{-11} \\cdot 5.972 \\times 10^{24}} \\approx 9.91 \\times 10^{-14}\\) s\u00b2/m\u00b3 - \\(T^2 / r^3 = 5.57 \\times 10^{12} / 5.68 \\times 10^{25} \\approx 9.8 \\times 10^{-14}\\) s\u00b2/m\u00b3\u2014matches closely! Notes : Small discrepancies reflect measurement precision or circular orbit assumption.","title":"3. Analysis of Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-implementation","text":"Notes : We\u2019ll simulate circular orbits and plot \\(T^2\\) vs. \\(r^3\\) to verify the law. import numpy as np import matplotlib.pyplot as plt # Constants G = 6.6743e-11 # m^3/kg\u00b7s^2 M_earth = 5.972e24 # kg M_sun = 1.989e30 # kg # Orbital period function def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Orbital radii (m) r_values = np.logspace(6, 9, 100) # 10^6 to 10^9 m # Compute periods T_earth = orbital_period(r_values, M_earth) # Around Earth T_sun = orbital_period(r_values, M_sun) # Around Sun # Plot T^2 vs r^3 plt.figure(figsize=(12, 6)) # Log-log plot plt.subplot(1, 2, 1) plt.loglog(r_values**3, T_earth**2, 'b-', label='Earth (M = 5.972e24 kg)') plt.loglog(r_values**3, T_sun**2, 'r-', label='Sun (M = 1.989e30 kg)') plt.xlabel('r\u00b3 (m\u00b3)') plt.ylabel('T\u00b2 (s\u00b2)') plt.title('T\u00b2 vs r\u00b3 (Kepler\\'s Third Law)') plt.grid(True, which=\"both\", ls=\"--\") plt.legend() # Circular orbit visualization (Moon example) r_moon = 3.844e8 # m T_moon = orbital_period(r_moon, M_earth) theta = np.linspace(0, 2*np.pi, 100) x_moon = r_moon * np.cos(theta) y_moon = r_moon * np.sin(theta) plt.subplot(1, 2, 2) plt.plot(x_moon, y_moon, 'b-', label=f'Moon Orbit (r = {r_moon/1e6:.1f} Mm)') plt.plot(0, 0, 'ko', label='Earth') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Circular Orbit Visualization') plt.axis('equal') plt.legend() plt.tight_layout() plt.show() # Verify with Moon data print(f\"Moon: T = {T_moon/86400:.2f} days, r = {r_moon/1e6:.1f} Mm\") Notes on Code : - Function : orbital_period computes \\(T = \\sqrt{\\frac{4\\pi^2 r^3}{G M}}\\) . - Data : \\(r\\) spans realistic ranges; \\(T\\) calculated for Earth and Sun. - Plots : - Left: Log-log \\(T^2\\) vs. \\(r^3\\) \u2014a straight line confirms \\(T^2 \\propto r^3\\) . - Right: Visualizes the Moon\u2019s orbit as a circle. - Verification : Moon\u2019s \\(T\\) matches ~27 days.","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#discussion-on-extensions","text":"Notes : - Elliptical Orbits : Kepler\u2019s Third Law generalizes to \\(T^2 = \\frac{4\\pi^2}{G M} a^3\\) , where \\(a\\) is the semi-major axis. The derivation uses angular momentum and energy conservation, not circular motion. - Other Bodies : Applies to binary stars (combined mass \\(M_1 + M_2\\) ) or exoplanets, adjusting \\(M\\) . Limitations : - Assumes \\(M \\gg m\\) (central mass dominates). - Ignores perturbations (e.g., other planets). Notes : Elliptical extension broadens applicability to most orbits.","title":"Discussion on Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/#rendering-and-running-in-vs-code","text":"File : Save as orbital_period.md . Rendering : Use \"Markdown+Math\" extension; preview with Ctrl+Shift+V . Code : Extract to orbital_period.py or use a .ipynb with the \"Jupyter\" extension. Requirements : Install numpy , matplotlib ( pip install numpy matplotlib ).","title":"Rendering and Running in VS Code"},{"location":"1%20Physics/2%20Gravity/Problem_1/#output-notes","text":"Graph : \\(T^2\\) vs. \\(r^3\\) is linear on a log-log scale, slope depends on \\(M\\) . Orbit : Moon\u2019s path is circular, visually confirming the setup. Moon Data : \\(T \\approx 27.32\\) days matches reality. This solution fully explores Kepler\u2019s Third Law with theory, examples, and simulation.","title":"Output Notes"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}